import{_ as i,c as t,o as a,a2 as o}from"./chunks/framework.BsykBGXc.js";const m=JSON.parse('{"title":"Primitive data structures","description":"","frontmatter":{},"headers":[],"relativePath":"ru/reference/data-structures.md","filePath":"ru/reference/data-structures.md"}'),l={name:"ru/reference/data-structures.md"};function r(n,e,s,u,d,c){return a(),t("div",null,e[0]||(e[0]=[o('<h1 id="primitive-data-structures" tabindex="-1">Primitive data structures <a class="header-anchor" href="#primitive-data-structures" aria-label="Permalink to &quot;Primitive data structures&quot;">​</a></h1><h2 id="numbers" tabindex="-1">Numbers <a class="header-anchor" href="#numbers" aria-label="Permalink to &quot;Numbers&quot;">​</a></h2><ul><li>What is a number - you know when you see it.</li><li>Should I use an integer or a float?</li><li>Arithmetic (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>) and math operations.</li><li>Operation precedence and using ().</li></ul><p>Extra topics:</p><ul><li>Generating random numbers.</li><li>Floor division and remainder.</li><li>Twists in float point arithmetic.</li></ul><h2 id="strings" tabindex="-1">Strings <a class="header-anchor" href="#strings" aria-label="Permalink to &quot;Strings&quot;">​</a></h2><p>Where strings are useful?</p><ul><li>propram messages to and from the user;</li><li>saving information about objects;</li><li>processing natural language;</li><li>prompts to large language models (ChatGPT);</li><li>special place for docstrings in code.</li></ul><p>Basics:</p><ul><li>Define a string with double (&quot;&quot;) or single (&#39;&#39;) quotes.</li><li>Concatenate or repeat a string with <code>+</code> and <code>*</code> operators.</li><li>String operations and methods: len(), lower(), upper(), strip(), replace(), split(), join(), find(), count().</li><li>Access individial charactes by zero-based index or parts by slices.</li><li>Strings are immutable in Python.</li><li>Emojis are strings too!</li><li>Combine text and variables using f-strings.</li></ul><p>Where can I get a new string from?</p><ul><li>Hardcoded in source code: string written in program code.</li><li>User input at prompt: get a strings from the user with input() function.</li><li>Read from a local text file: use <code>Path(&quot;somefile.txt&quot;).read_text()</code>. Write to a file.</li><li>Read from the internet: use <code>httpx</code> or <code>requests</code> to fetch web page content.</li><li>Extra option: get command line arguments through <code>sys.argv</code>.</li></ul><p>Extra topics:</p><ul><li>Docstrings in code.</li><li>Escape characters and multiline strings.</li><li>Character sets: ASCII and utf-8.</li><li>Wildcards and regular expressions.</li><li>Options for output formatting.</li></ul><h2 id="comparisons-and-boolean-values" tabindex="-1">Comparisons and boolean values <a class="header-anchor" href="#comparisons-and-boolean-values" aria-label="Permalink to &quot;Comparisons and boolean values&quot;">​</a></h2><ul><li>Equality and other comparison operators.</li><li>Boolean values <code>True</code> and <code>False</code>.</li><li>Using to branch brogram execution.</li></ul><h2 id="converting-between-types" tabindex="-1">Converting between types <a class="header-anchor" href="#converting-between-types" aria-label="Permalink to &quot;Converting between types&quot;">​</a></h2><h1 id="compound-data-structures" tabindex="-1">Compound data structures <a class="header-anchor" href="#compound-data-structures" aria-label="Permalink to &quot;Compound data structures&quot;">​</a></h1><h2 id="list" tabindex="-1">List <a class="header-anchor" href="#list" aria-label="Permalink to &quot;List&quot;">​</a></h2><p>Mind model:</p><ul><li>A collection of many values of the same type</li><li>Mutable</li><li>Provide examples of a list</li></ul><p>Basic operations:</p><ul><li>Syntax to create using [] and commas</li><li>Refer an item by zero-based index</li><li>Refer to items using slices</li><li>Add an new item to list</li><li>Change an item on the list</li></ul><p>More operations:</p><ul><li>List comprehensions</li><li>Generating number sequences with range() function</li></ul><h2 id="tuple" tabindex="-1">Tuple <a class="header-anchor" href="#tuple" aria-label="Permalink to &quot;Tuple&quot;">​</a></h2><p>Mind model</p><ul><li>A few values of the same or different types</li><li>Immutable</li><li>What is a tuple useful for?</li></ul><p>Operations</p><ul><li>Syntax to create using () and commas</li><li>Access to items and unpacking</li></ul><p>Extra questions</p><ul><li>To we want to name fields in a tuple?</li><li>Is a list of tuples useful?</li></ul><h2 id="dictionary" tabindex="-1">Dictionary <a class="header-anchor" href="#dictionary" aria-label="Permalink to &quot;Dictionary&quot;">​</a></h2><p>Mind model:</p><ul><li>Mapping of keys to values</li><li>Significance - an extremely useful data structure</li><li>So many things are represented as dictionary!</li></ul><p>Operations:</p><ul><li>Syntax to create using {}, : and commas</li><li>Adding, changing and dropping elements</li></ul><h2 id="review-operations-with-compound-data-structures" tabindex="-1">Review: operations with compound data structures <a class="header-anchor" href="#review-operations-with-compound-data-structures" aria-label="Permalink to &quot;Review: operations with compound data structures&quot;">​</a></h2><ul><li>Using <code>list</code>, <code>tuple</code> and <code>dict</code> constructor</li><li>Access an element by an index or key</li><li>Iterate over the elements</li><li>Concatenate or join two data structures</li><li>Using in comprehensions</li><li>Nested data structures</li></ul>',39)]))}const h=i(l,[["render",r]]);export{m as __pageData,h as default};
