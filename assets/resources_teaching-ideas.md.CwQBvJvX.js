import{_ as a,c as i,o as t,a2 as s}from"./chunks/framework.BsykBGXc.js";const p=JSON.parse('{"title":"Teaching Ideas","description":"","frontmatter":{},"headers":[],"relativePath":"resources/teaching-ideas.md","filePath":"resources/teaching-ideas.md"}'),o={name:"resources/teaching-ideas.md"};function n(r,e,l,c,d,h){return t(),i("div",null,e[0]||(e[0]=[s('<h1 id="teaching-ideas" tabindex="-1">Teaching Ideas <a class="header-anchor" href="#teaching-ideas" aria-label="Permalink to &quot;Teaching Ideas&quot;">​</a></h1><p>This site offers a programming practice with three steps:</p><ol><li>Run provided Python code, change it a little and run again.</li><li>Try implement other suggested code changes and new assignments.</li><li>Open an LLM and ask questions about the code you wrote.</li></ol><h2 id="what-makes-a-perfect-exercise" tabindex="-1">What makes a perfect exercise <a class="header-anchor" href="#what-makes-a-perfect-exercise" aria-label="Permalink to &quot;What makes a perfect exercise&quot;">​</a></h2><p>The exercises were designed with the following criteria and goals in mind:</p><ul><li>small, under 10-15 lines of code,</li><li>cover basic Python syntax,</li><li>achievable within the standard library,</li><li>encourage experimentation and stimulate talking about code,</li><li>make at least some connection to real life situations,</li><li>slightly differ from the classic programming exercises.</li></ul><p>The exercises should be beginner-friendly and oriented towards learners with non-tech background.</p><h2 id="levels-of-difficulty" tabindex="-1">Levels of difficulty <a class="header-anchor" href="#levels-of-difficulty" aria-label="Permalink to &quot;Levels of difficulty&quot;">​</a></h2><p>There three levels of difficulty in the exercises, so that we can keep any student busy:</p><p><strong>Entry level:</strong> Run provided examples and make small changes to the code to find out how it works and be able to explain it. Document existing code with comments or function docstrings.</p><p><strong>Intermediate level:</strong> Redesign programs and modify their behaviors to achieve new results according to a provided description or own specification.</p><p><strong>Advanced level:</strong> Forecast the outcomes of programs over repeated runs using some theory or a simulation. Generalize code for reuse, make tests and refactor code for maintainability. Think of extensions for real-life cases.</p>',12)]))}const u=a(o,[["render",n]]);export{p as __pageData,u as default};
