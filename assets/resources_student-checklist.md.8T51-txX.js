import{_ as a,c as i,o as t,a2 as o}from"./chunks/framework.BsykBGXc.js";const p=JSON.parse('{"title":"Student Checklist","description":"","frontmatter":{},"headers":[],"relativePath":"resources/student-checklist.md","filePath":"resources/student-checklist.md"}'),s={name:"resources/student-checklist.md"};function n(l,e,r,c,d,h){return t(),i("div",null,e[0]||(e[0]=[o('<h1 id="student-checklist" tabindex="-1">Student Checklist <a class="header-anchor" href="#student-checklist" aria-label="Permalink to &quot;Student Checklist&quot;">​</a></h1><p>Below is a checklist for the minimal Python syntax and some key ideas in programming.</p><h2 id="basic-data-types" tabindex="-1">Basic data types <a class="header-anchor" href="#basic-data-types" aria-label="Permalink to &quot;Basic data types&quot;">​</a></h2><h3 id="numbers" tabindex="-1">Numbers <a class="header-anchor" href="#numbers" aria-label="Permalink to &quot;Numbers&quot;">​</a></h3><ul><li>Integers and floats represent quantities and measurements.</li><li>Arithmetic and math operations work on integers and floats.</li><li>Integers are easier to represent than floats for a computer.</li></ul><h3 id="strings" tabindex="-1">Strings <a class="header-anchor" href="#strings" aria-label="Permalink to &quot;Strings&quot;">​</a></h3><ul><li>Strings contain text and represent information like words, sentences, text as well labels, titles and names.</li><li>In code strings are characters that are enclosed in single (<code>&#39;</code>) or double (<code>&quot;</code>) quotes.</li><li>Strings are iterable by character. Exercises: print a string by character, reverse a string, count characters in a string.</li><li>Operations with strings include concatenation, splitting, extracting parts, and modifying strings.</li><li>Operators (<code>+</code> and <code>*</code>), functions (like <code>len()</code>), and methods (like <code>.lower()</code>) work on strings.</li><li>Multiline strings are enclosed in triple quotes and contain newlines as escape characters. They are good to make a string that is a poem.</li></ul><h3 id="booleans" tabindex="-1">Booleans <a class="header-anchor" href="#booleans" aria-label="Permalink to &quot;Booleans&quot;">​</a></h3><ul><li>Comparison operations result in a boolean value. These values are used as flags for decisions.</li><li>A boolean can only be <code>True</code> or <code>False</code>.</li><li><code>and</code> and <code>or</code> operators combine booleans into logical expressions athat are useful for checking several conditions.</li></ul><h3 id="conversion-between-types" tabindex="-1">Conversion between types <a class="header-anchor" href="#conversion-between-types" aria-label="Permalink to &quot;Conversion between types&quot;">​</a></h3><ul><li>The <code>str()</code>, <code>int()</code>, <code>float()</code>, and <code>bool()</code> constructors allow conversion<br> between types.</li><li>Python automatically coerces types to minimize the conversions required but sometimes a programmer must do it. Example: <code>input()</code> returns a string, but you need a number.</li></ul><h2 id="data-structures" tabindex="-1">Data structures <a class="header-anchor" href="#data-structures" aria-label="Permalink to &quot;Data structures&quot;">​</a></h2><ul><li>Values of basic data types can be assembled into compound data types such as lists, tuples, and dictionaries.</li><li>A list is a sequence of values of the same type: <code>[7.5, 6.2, 5.1]</code>, <code>[&#39;Joe&#39;, &#39;Jane&#39;, &#39;Jim&#39;]</code>. Python allows you to join different types of values in a list but you shouldn&#39;t.</li><li>Tuple joins together several values of the same or different types: <code>(25.5, 10.3)</code> (2D coordinates), <code>(7, &quot;B&quot;)</code> (airplane seat).</li><li>Dictionaries are collections of key-value pairs. Using a dictionary you can look up of a value by its key.</li></ul><p>Common operations on collections include:</p><ul><li><p>creating a collection,</p></li><li><p>accessing an element (by an index in a list or a tuple or by key in a dictionary),</p></li><li><p>subset or a slice of a collection,</p></li><li><p>reusing a collection to create a new one.</p></li><li><p>Collections can be nested. For example, a list can contain tuples: <code>[(1, 2), (5, 5)]</code>.</p></li></ul><h2 id="values-and-expressions" tabindex="-1">Values and expressions <a class="header-anchor" href="#values-and-expressions" aria-label="Permalink to &quot;Values and expressions&quot;">​</a></h2><ul><li>A value is a small piece of data of a specific data type. <code>5</code> is an integer value, <code>0.33</code> is a float value, and <code>&quot;Life is wonderful&quot;</code> is a string value.</li><li>Operations on values form an expression. An expression evaluates to a resulting value.</li><li>Operations have order of precedence that you can clarify with parenthesis <code>()</code>.</li><li>You can use <a href="https://pyodide.org/en/stable/console.html" target="_blank" rel="noreferrer">Python REPL</a> to write out and evaluate expressions.</li></ul><h2 id="variables" tabindex="-1">Variables <a class="header-anchor" href="#variables" aria-label="Permalink to &quot;Variables&quot;">​</a></h2><h3 id="concept" tabindex="-1">Concept <a class="header-anchor" href="#concept" aria-label="Permalink to &quot;Concept&quot;">​</a></h3><ul><li>A variable is a named storage for a value that can be accessed throughout the program.</li><li>You can <em>bind</em> a name to a value and refer to this value by that name later.</li></ul><h3 id="assignment-operation" tabindex="-1">Assignment operation <a class="header-anchor" href="#assignment-operation" aria-label="Permalink to &quot;Assignment operation&quot;">​</a></h3><ul><li>Another way of saying the same is that you <em>assign</em> a value to a variable with a specific name.</li><li>Assignment operator <code>=</code> takes an expression on the right right, evaluates it and assigns a value to a variable on the left.</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">language </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Python&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> language </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;is great!&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">final_grade </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">85</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">90</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">93</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span></span></code></pre></div><ul><li>When unpacking tuples you can assign values to several variables at once: <code>a, b = (3, 8)</code>.</li></ul><h3 id="mutability" tabindex="-1">Mutability <a class="header-anchor" href="#mutability" aria-label="Permalink to &quot;Mutability&quot;">​</a></h3><ul><li>In Python, all variables are mutable — you can change or reassign new values to them. <code>x = 5; x = x + 1</code> works and <code>x</code> value becomes <code>6</code>.</li></ul><h3 id="naming" tabindex="-1">Naming <a class="header-anchor" href="#naming" aria-label="Permalink to &quot;Naming&quot;">​</a></h3><ul><li>There are requirements about what a valid variable name can be. <code>my_age</code> is ok.</li><li>Choosing good variable names is not trivial and can be very subjective.</li></ul><h3 id="comments" tabindex="-1">Comments <a class="header-anchor" href="#comments" aria-label="Permalink to &quot;Comments&quot;">​</a></h3><ul><li>Unlike in mathematics the value of the variables in programming are always known, they are not to be<br> discovered by solving equations.</li><li>Few other programming langiages use <code>:=</code> or <code>&lt;-</code> as assignment operator to highlight assignment is not equality.</li></ul><h2 id="statements-and-code-blocks" tabindex="-1">Statements and code blocks <a class="header-anchor" href="#statements-and-code-blocks" aria-label="Permalink to &quot;Statements and code blocks&quot;">​</a></h2><ul><li>Command to do something in a Python program is called a statement.</li><li>A statement can occupy one line or span many lines.</li><li>A program in Python is a series of statements that are executed as a sequence.</li><li>A code block is a group of statements. They are used to create functions, loops, and conditional statements.</li><li>In Python code blocks are defined by indentation (spaces at the start of a line).</li></ul><h2 id="flow-of-programs" tabindex="-1">Flow of programs <a class="header-anchor" href="#flow-of-programs" aria-label="Permalink to &quot;Flow of programs&quot;">​</a></h2><h3 id="conditions" tabindex="-1">Conditions <a class="header-anchor" href="#conditions" aria-label="Permalink to &quot;Conditions&quot;">​</a></h3><ul><li>A condition is a check or comparison that evaluates to a boolean value.</li><li>If a condition is true, it triggers one course of action; if it is false, other action will be taken. Conditions are used in <code>if</code> statements and <code>while</code> loops.</li></ul><h3 id="conditional-statements" tabindex="-1">Conditional statements <a class="header-anchor" href="#conditional-statements" aria-label="Permalink to &quot;Conditional statements&quot;">​</a></h3><ul><li>An <code>if</code> statement instructs the program to execute a code block only if a specified condition is true.</li><li><code>if-else</code> statements allow you to execute one block of code if a condition is true and another block if it is false.</li><li>The <code>elif</code> keyword can be used to add multiple conditions. It is easy to overlook some condition in</li></ul><h3 id="while-loops" tabindex="-1"><code>while</code> loops <a class="header-anchor" href="#while-loops" aria-label="Permalink to &quot;`while` loops&quot;">​</a></h3><ul><li><code>while</code> loops repeat a code block as long as a condition remains true.</li><li>They are useful for repeating actions until a certain condition is met.</li><li>The actions inside the loop body usually affect the condition. (for example a counter or a user input).</li><li>You can make an iternal loop with <code>while True:</code> and also exit the loop with <code>break</code> statement.</li></ul><h3 id="for-loops" tabindex="-1"><code>for</code> loops <a class="header-anchor" href="#for-loops" aria-label="Permalink to &quot;`for` loops&quot;">​</a></h3><ul><li><code>for</code> loops repeat a code block by choosing elements from a collection of items.</li><li>They are often used to iterate over lists, tuples, or strings.</li><li>You can also use <code>for</code> loop with <code>range()</code> function you know a specific number of times to run the loop.</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i)</span></span></code></pre></div><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><p>What is it?</p><ul><li>Functions are reusable blocks of code that may take inputs (also called arguments), perform computations and actions, and can return an output value or return nothing.</li></ul><p>Where is it&amp;</p><ul><li>You define a function in one place of a program and run it later in one or more places. Running a function is also called &#39;invoking&#39;, or &#39;calling&#39; a function.</li><li>Function can be defined in a different file, then you have to import it.</li><li>You are likely to use built-in functions, stardard library functions and third party library functions and also write your own functions.</li></ul><p>What else about it?</p><ul><li>Functions can call other functions.</li><li>Functions may have default parameter values.</li><li>Function may have a short text description called a docstring.</li><li>Function arguments and return value may be annotated to tell about types of variables used.</li></ul><p>Good practice:</p><ul><li>You can start programming with a script and make own functions when you need to reuse some code block.</li><li>Make a function that does one thing, clearly named and is easy to test.</li><li>You can also separate functions that do calculations and the ones that communicate with outer world (printing, taking inputs, saving or reading files).</li></ul><h3 id="io" tabindex="-1">IO <a class="header-anchor" href="#io" aria-label="Permalink to &quot;IO&quot;">​</a></h3><h3 id="console" tabindex="-1">Console <a class="header-anchor" href="#console" aria-label="Permalink to &quot;Console&quot;">​</a></h3><ul><li><code>print()</code> prints text to the screen for the user to read.</li><li><code>input()</code> receives input from the user as a string.</li></ul><h3 id="files" tabindex="-1">Files <a class="header-anchor" href="#files" aria-label="Permalink to &quot;Files&quot;">​</a></h3><ul><li>Files can be opened, read, and written using Python&#39;s built-in functions <code>open()</code>, <code>read()</code>, and <code>write()</code>.</li><li>There is also a modern <code>pathlib</code> library in Python that makes handling files easier.</li></ul><h3 id="reading-from-internet" tabindex="-1">Reading from internet <a class="header-anchor" href="#reading-from-internet" aria-label="Permalink to &quot;Reading from internet&quot;">​</a></h3><ul><li>Not possible in the Pyodide programming enviroment that we use inthis course, but easy with <code>httpx</code> or <code>requests</code> libraries.</li></ul><h2 id="errors-and-tests" tabindex="-1">Errors and tests <a class="header-anchor" href="#errors-and-tests" aria-label="Permalink to &quot;Errors and tests&quot;">​</a></h2><h3 id="error-handling" tabindex="-1">Error handling <a class="header-anchor" href="#error-handling" aria-label="Permalink to &quot;Error handling&quot;">​</a></h3><ul><li>Sometimes a program will encounter an impossible condition and stop its execution. These situations are called exceptions.</li><li>Exception provide a message that tries to explain you what went wrong.</li><li>Some errors would not cause exceptions, and you will need tests to add more guarantees your program is correct.</li></ul><h2 id="unit-testing" tabindex="-1">Unit testing <a class="header-anchor" href="#unit-testing" aria-label="Permalink to &quot;Unit testing&quot;">​</a></h2><ul><li>Testing ensures that code behaves as expected.</li><li>You can write simple assertions in code with <code>assert</code> followed by condition and convert them to tests later.</li><li>A small test for a part of the code is called a &#39;unit test&#39;.</li><li>As experienced programmer you may write the test for you code before the code. This technique is called test driven development (TDD).</li></ul><h2 id="comments-1" tabindex="-1">Comments <a class="header-anchor" href="#comments-1" aria-label="Permalink to &quot;Comments&quot;">​</a></h2><ul><li>Comments in code provide extra information to the reader and do no affect how code runs.</li><li>Comments in Python start with <code>#</code></li><li>Do not overcomment — let you code speak clearly for itself.</li><li>Also do not leave too much commented code in program to clean up later.</li></ul><h2 id="not-covered" tabindex="-1">Not covered <a class="header-anchor" href="#not-covered" aria-label="Permalink to &quot;Not covered&quot;">​</a></h2><p>Several things that usually show up in the beginner courses but you can survive without and catch up later:</p><ul><li><code>None</code>,</li><li>sets.</li></ul><p>Several topics that do not show up often as but are quite useful, consider researching them:</p><ul><li>dataclasses,</li><li>enums,</li><li>working with dates and time,</li><li><code>asc()</code> and <code>ord()</code> for ASCII character code.</li></ul><h2 id="short-glossary" tabindex="-1">Short Glossary <a class="header-anchor" href="#short-glossary" aria-label="Permalink to &quot;Short Glossary&quot;">​</a></h2><ul><li><strong>Boolean</strong>: A data type with two possible values: <code>True</code> or <code>False</code>.</li><li><strong>Condition</strong>: An expression that evaluates to a boolean value, used to control the flow of a program.</li><li><strong>Data type</strong>: A classification of data that tells the compiler or interpreter how to use the data.</li><li><strong>Expression</strong>: A combination of values, variables, operators, and functions that are evaluated to produce a new value.</li><li><strong>Function</strong>: A reusable block of code that performs a specific task.</li><li><strong>Loop</strong>: A code block that is repeated until a certain condition is reached.</li><li><strong>Variable</strong>: An identifier for a stored value that can be accessed or changed during program execution.</li></ul>',72)]))}const m=a(s,[["render",n]]);export{p as __pageData,m as default};
