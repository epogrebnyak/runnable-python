import{_ as r,c as a,o as t,a2 as o}from"./chunks/framework.BsykBGXc.js";const p=JSON.parse('{"title":"Books and Talks","description":"","frontmatter":{},"headers":[],"relativePath":"resources/books-and-talks.md","filePath":"resources/books-and-talks.md"}'),n={name:"resources/books-and-talks.md"};function i(l,e,s,h,d,c){return t(),a("div",null,e[0]||(e[0]=[o('<h1 id="books-and-talks" tabindex="-1">Books and Talks <a class="header-anchor" href="#books-and-talks" aria-label="Permalink to &quot;Books and Talks&quot;">​</a></h1><h2 id="top-choices-for-inspiration" tabindex="-1">Top choices for inspiration <a class="header-anchor" href="#top-choices-for-inspiration" aria-label="Permalink to &quot;Top choices for inspiration&quot;">​</a></h2><ul><li>Allen Downey <a href="https://allendowney.github.io/ThinkPython/" target="_blank" rel="noreferrer">Think Python</a> and the <a href="https://greenteapress.com/wp/" target="_blank" rel="noreferrer">Green Tea Press series</a>.</li><li>Raymond Hettinger and <a href="https://www.youtube.com/watch?v=wf-BqAjZb8M" target="_blank" rel="noreferrer">Beyond PEP8 talk</a> (2015).</li><li>Kris Jenkins talks to developpers about their work in <a href="https://www.youtube.com/channel/UC-0fWjosItIOD4ThhS6oyfA" target="_blank" rel="noreferrer">Developper Voices</a> podcast.</li></ul><h2 id="leading-books" tabindex="-1">Leading books <a class="header-anchor" href="#leading-books" aria-label="Permalink to &quot;Leading books&quot;">​</a></h2><ul><li><a href="https://allendowney.github.io/" target="_blank" rel="noreferrer">Allen Downey</a> <a href="https://allendowney.github.io/ThinkPython/" target="_blank" rel="noreferrer">Think Python</a> (now in 3rd edition).</li><li><a href="https://inventwithpython.com/" target="_blank" rel="noreferrer">Al Sweigart</a> and <a href="https://automatetheboringstuff.com/" target="_blank" rel="noreferrer">&quot;Automate the Boring Stuff with Python&quot;</a>.</li><li>Eric Matthes and <a href="https://nostarch.com/python-crash-course-3rd-edition" target="_blank" rel="noreferrer">&quot;Python Crash Course&quot;</a> (also 3rd edition).</li></ul><p>These are modern and more accessible books that seems to be more popular than ealier and more lengthy volumes by Zed Shaw, Mark Pilgrim, Mark Lutz and Kenneth Reitz.</p><p>Also notable:</p><ul><li><a href="https://jakevdp.github.io/WhirlwindTourOfPython/" target="_blank" rel="noreferrer">A Whirlwind Tour of Python by Jake VanderPlas</a>.</li></ul><h2 id="full-course" tabindex="-1">Full course <a class="header-anchor" href="#full-course" aria-label="Permalink to &quot;Full course&quot;">​</a></h2><p>Take a <a href="https://programming-25.mooc.fi/" target="_blank" rel="noreferrer">University of Helsinki Python MOOC 2025</a> while it is still free and open.</p><p><a href="https://www.py4e.com/lessons" target="_blank" rel="noreferrer">py4e</a> is a well-structured beginner course originated in 2015.</p><h2 id="short-references" tabindex="-1">Short references <a class="header-anchor" href="#short-references" aria-label="Permalink to &quot;Short references&quot;">​</a></h2><p><a href="https://quantecon.org/" target="_blank" rel="noreferrer">QuantEcon</a> and <a href="https://scipy-lectures.org/" target="_blank" rel="noreferrer">Scipy Lectures</a> make a quick introduction to Python before jumping to bigger topics in quantitative and scientific modelling. They can serve as practical introductions to Python.</p><blockquote><p>Add kaggle link to Zohrab&#39;s notebooks.</p></blockquote><h2 id="style-guides" tabindex="-1">Style guides <a class="header-anchor" href="#style-guides" aria-label="Permalink to &quot;Style guides&quot;">​</a></h2><p>Two big ones:</p><ul><li><a href="https://www.python.org/dev/peps/pep-0008/" target="_blank" rel="noreferrer">PEP 8 – Style Guide for Python Code</a></li><li><a href="https://google.github.io/styleguide/pyguide.html" target="_blank" rel="noreferrer">Google Python Style Guide</a></li></ul><p>Small old gems:</p><ul><li><a href="https://gist.github.com/sloria/7001839" target="_blank" rel="noreferrer">Best of the Best Practices (BOBP)</a></li><li><a href="https://dmugtasimov-tech.blogspot.com/2016/12/my-python-software-development-practices.html" target="_blank" rel="noreferrer">Dmitry Mugtasimov&#39;s notes</a></li></ul><h2 id="renowned-speakers" tabindex="-1">Renowned speakers <a class="header-anchor" href="#renowned-speakers" aria-label="Permalink to &quot;Renowned speakers&quot;">​</a></h2><ul><li>Raymond Hettinger. <a href="https://www.youtube.com/watch?v=OSGv2VnC0go" target="_blank" rel="noreferrer">Transforming Code into Beautiful, Idiomatic Python</a> and <a href="https://www.youtube.com/watch?v=wf-BqAjZb8M" target="_blank" rel="noreferrer">Beyond PEP-8</a> as mentioned above.</li><li><a href="https://pyvideo.org/pydata-seattle-2017/so-you-want-to-be-a-python-expert.html" target="_blank" rel="noreferrer">James Powell. So You Want to Be a Python Expert?</a></li><li><a href="https://www.youtube.com/watch?v=RZ4Sn-Y7AP8" target="_blank" rel="noreferrer">David Beazley. Discovering Python</a>.</li></ul><h2 id="programming-classics" tabindex="-1">Programming classics <a class="header-anchor" href="#programming-classics" aria-label="Permalink to &quot;Programming classics&quot;">​</a></h2><p><a href="https://en.wikipedia.org/wiki/The_C_Programming_Language" target="_blank" rel="noreferrer"><strong>&quot;The C Programming Language&quot;</strong></a> by Kernighan and Ritchie (1978) is a classic in technical writing and a foundational piece of computer literature.</p><p>From <a href="https://web.eecs.umich.edu/~weimerw/2018-481/readings/mythical-man-month.pdf" target="_blank" rel="noreferrer"><strong>&quot;The Mythical Man-Month&quot;</strong></a> (MMM) by Fred Brooks (1975), a classic in software engineering and project management, we know that there is no silver bullet, adding more people to a late software project makes it worse, and other laws and adages that still hold true today.</p><p><a href="https://web.mit.edu/6.001/6.037/sicp.pdf" target="_blank" rel="noreferrer"><strong>&quot;Structure and Interpretation of Computer Programs&quot;</strong></a> (SICP) by Harold Abelson and Gerald Jay Sussman (1985) is an influential text that can convince skeptics that programming is a science but also at risks deterring you from programming for life.</p><div class="tip custom-block" style="padding-top:8px;"><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Read on the <em>MMM</em>, glance through the <em>SICP</em> table of contents, and get a table copy of <em>K&amp;R</em>.</p></div></div><h2 id="blogs" tabindex="-1">Blogs <a class="header-anchor" href="#blogs" aria-label="Permalink to &quot;Blogs&quot;">​</a></h2><ol><li><p><em>programming is terrible</em> blog posts could have really made a good book together. Around the same time Jeff Atwood and Joel Spolsky released their blog series as books. Still prefer <em>tef</em>&#39;s writing and hope he is doing well despite of a pessimistic blog title.</p><ul><li><a href="https://programmingisterrible.com/post/139222674273/write-code-thats-easy-to-delete-and-easy-to-debug" target="_blank" rel="noreferrer">Write code that’s easy to delete, and easy to debug too</a>.</li><li><a href="https://programmingisterrible.com/post/139222674273/repeat-yourself-do-more-than-one-thing-and-rewrite-everything" target="_blank" rel="noreferrer">Repeat yourself, do more than one thing, and rewrite everything</a>.</li><li><a href="https://programmingisterrible.com/post/173883533613/code-to-debug" target="_blank" rel="noreferrer">Write code that’s easy to delete, and easy to debug too.</a></li><li><a href="https://programmingisterrible.com/post/139222674273/how-i-write-software" target="_blank" rel="noreferrer">How I write software</a>.</li></ul></li><li><p><em>&quot;Don&#39;t have good ideas if you aren&#39;t willing to be responsible for them&quot;</em> and 119 other <a href="https://www.cs.yale.edu/homes/perlis-alan/quotes.html" target="_blank" rel="noreferrer">perilisms</a> by Alan Perlis.</p><p>Not to confuse with great other books - the <a href="https://jj09.net/programming-pearls/" target="_blank" rel="noreferrer">Programming Pearls</a> by Jon Bentley or <a href="https://bayes.cs.ucla.edu/WHY/" target="_blank" rel="noreferrer">Book fo Why</a> by Judea Pearl and Dana MacKenzie.</p></li><li><p><a href="https://github.com/Droogans/unmaintainable-code" target="_blank" rel="noreferrer">Write unmaintainable code - enure a job for life</a> by Roedy Green.</p></li></ol><h2 id="glossaries" tabindex="-1">Glossaries <a class="header-anchor" href="#glossaries" aria-label="Permalink to &quot;Glossaries&quot;">​</a></h2><ul><li><a href="https://programmingisterrible.com/post/65781074112/devils-dictionary-of-programming" target="_blank" rel="noreferrer">Devil&#39;s Dictionary of Programming (2013).</a></li><li><a href="https://havantcivicsociety.uk/wp-content/uploads/2019/05/ibmjarg.pdf" target="_blank" rel="noreferrer">IBM Jargon and General Computing Dictionary (1990).</a></li></ul><h2 id="talks" tabindex="-1">Talks <a class="header-anchor" href="#talks" aria-label="Permalink to &quot;Talks&quot;">​</a></h2><p>Software is hard:</p><ul><li><a href="https://www.youtube.com/watch?v=8pTEmbeENF4" target="_blank" rel="noreferrer">The Future of Programming</a> Bret Victor.</li><li><a href="https://www.youtube.com/watch?v=czzAVuVz7u4" target="_blank" rel="noreferrer">The Art of Code</a> by Dylan Beattie.</li><li><a href="https://www.youtube.com/watch?v=czzAVuVz7u4" target="_blank" rel="noreferrer">Why Can&#39;t We Make Simple Software?</a> by Peter van Hardenberg.</li></ul><p>Social is hard:</p><ul><li><a href="https://www.youtube.com/watch?v=1i8ylq4j_EY" target="_blank" rel="noreferrer">Julie Pagano. It&#39;s Dangerous to Go Alone: Battling the Invisible Monsters in Tech</a> - mental health, inclusivity and making tech a better place.</li></ul><h2 id="tired-of-it" tabindex="-1">Tired of it? <a class="header-anchor" href="#tired-of-it" aria-label="Permalink to &quot;Tired of it?&quot;">​</a></h2><p>Sometimes it worth switching your attention to other knowledge areas and questions away from programming. Several suggestions:</p><ul><li><strong><a href="https://www.youtube.com/watch?v=XcRFOAKl3OY" target="_blank" rel="noreferrer">Why Zebras Don&#39;t Get Ulcers</a></strong> by Robert Sapolsky (1994).</li><li><strong><a href="https://www.youtube.com/watch?v=ji5_MqicxSo" target="_blank" rel="noreferrer">The Last Lecture: Really Achieving Your Childhood Dreams</a></strong> by Randy Pausch (2007).</li><li><strong><a href="https://finec.mgimo.ru/blog/rafaela-medeiros-philosophy-interview/" target="_blank" rel="noreferrer">Philosophy of Science</a></strong> interview with Rafaela Medeiros, where I&#39;m the interview host (2021).</li></ul>',38)]))}const u=r(n,[["render",i]]);export{p as __pageData,u as default};
